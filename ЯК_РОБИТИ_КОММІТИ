Зробити комміт можна кількома способами.
Припустимо, ви змінили кілька файлів (тобто вони на стадіюванні),
але ви хочете закоммітити зміни лише в одному файлі:

 $ git commit -s file1

Якщо ви хочете закоммітити всі зміни, скористайтеся будь-якою з цих форм:

$ git commit -s

$ git commit ./ -s

$ git commit -a -s

Ось таблиця, яка показує, як працює крок комміту:

Команда: git commit
Вихідний файл: Без змін
Зміст (Index): Без змін
Ланцюжок коммітів: Новий об'єкт комміту створюється зі змісту (індексу)
                   і додається нагору ланцюжка коммітів
Посилання: HEAD у поточній гілці вказує на новий об'єкт комміту

$ git diff

покаже всі відмінності між вашими робочими каталогами і тим,
що було закоммітино раніше. Після того, як ви виконаєте комміт,
він не покаже жодних відмінностей.

$ git log | grep "^commit" | head -10
або для PowerShell
git log | Select-String "^commit" -Context 0,9

виводить перші 10 рядків з історії комітів,
які починаються зі слова "commit".

git tag створює тег або анотований тег (текстовий рядок, який посилається на об'єкт комміту).
Тег розміщується в .git/refs/tags , якщо це не анотований тег, в цьому випадку тег створюється
як об'єкт, в сховищі об'єктів:

Команда: git tag
Вихідний файл: Без змін
Зміст: Без змін
Ланцюжок коммітів: Без змін
Посилання: 	Створено новий тег

git tag ver2 be327e572e8cea0527b4d6ddaec8d7b307893903
назначаємо комміту тег "ver2"

git checkout ver2
переносимо HEAD на цей комміт

git log --oneline -n 5
вивести в одну лінію логи останніх 5ти коммітів

git log -n 5
вивести повні логи останніх 5ти коммітів

git cherry-pick ff793e6
- ця команда застосовує зміни з обраного коміту ff793e6 на поточну гілку.
Замість того, щоб переносити всю гілку, як це робить злиття (merge),
git cherry-pick вибирає конкретний коміт і копіює його зміни на поточну
гілку. У вашому випадку, команда git cherry-pick ff793e6 копіюватиме
зміни з коміту з хешем ff793e6 і додасть їх як новий коміт на поточну гілку.

$ git log --pretty=oneline
виводить логи коммітів в одну лінію.
відрізняється від "git log --oneline" тим,
що тут хеш виводиться без скорочення

git log -p c49009
отримаєте детальну інформацію про коміт з хешем c49009,
включаючи список змін у файловій структурі, представлений
у вигляді патчів. Це дозволяє вам переглянути конкретні зміни,
які були внесені в цей коміт.

